{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " # SNAP Tutorial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notebook tested with python 2.7. Small change might be neccessary for python 3.<BR>\n",
    "Uses the following additional packes and software:<BR>\n",
    "- gnuplot (http://www.gnuplot.info/)\n",
    "- graphviz (https://www.graphviz.org/)\n",
    "- powerlaw (https://github.com/jeffalstott/powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test Instalation\n",
    "status = False\n",
    "try:\n",
    "    import snap\n",
    "    version = snap.Version\n",
    "    i = snap.TInt(5)\n",
    "    if i == 5:\n",
    "        status = True\n",
    "except:\n",
    "    pass\n",
    "\n",
    "if status:\n",
    "    print \"SUCCESS, your version of Snap.py is %s\" % (version)\n",
    "else:\n",
    "    print \"*** ERROR, no working Snap.py was found on your computer\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import snap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i= snap.TInt(10)\n",
    "print i.Val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an empty Vector\n",
    "v = snap.TIntV()\n",
    "\n",
    "# Add elements\n",
    "v.Add(1) \n",
    "v.Add(2) \n",
    "v.Add(3) \n",
    "v.Add(4) \n",
    "v.Add(5)\n",
    "\n",
    "# Print vector size\n",
    "print v.Len()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Vector  Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get and set element value\n",
    "print v[3]\n",
    "v[3] = 2*v[2]\n",
    "print v[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Print vector elements\n",
    "for item in v: \n",
    "    print item\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0, v.Len()):\n",
    "    print i, v[i]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hash Table Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Create an empty table\n",
    "h = snap.TIntStrH()\n",
    "\n",
    "# Add elements\n",
    "h[5] = \"apple\" \n",
    "h[3] = \"tomato\"\n",
    "h[9] = \"orange\" \n",
    "h[6] = \"banana\" \n",
    "h[1] = \"apricot\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print table size \n",
    "print h.Len()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get element value\n",
    "print \"h[3] =\", h[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set element value \n",
    "h[3] = \"peach\"\n",
    "print \"h[3] =\", h[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print table elements\n",
    "for key in h:\n",
    "    print key, h[key]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Pair Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Create a pair\n",
    "p = snap.TIntStrPr(1,\"one\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print pair values\n",
    "print p.GetVal1() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print p.GetVal2()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic Graph and Network Classes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Graph Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Create a Directed Graph\n",
    "G1 = snap.TNGraph.New()\n",
    "\n",
    "# Add Nodes before \n",
    "G1.AddNode(1) \n",
    "G1.AddNode(5) \n",
    "G1.AddNode(12)\n",
    "\n",
    "# adding edges\n",
    "G1.AddEdge(1,5)\n",
    "G1.AddEdge(5,1)\n",
    "G1.AddEdge(5,12)\n",
    "\n",
    "# Set node labels\n",
    "NIdName = snap.TIntStrH() \n",
    "NIdName[1] = \"1\" \n",
    "NIdName[5] = \"5\" \n",
    "NIdName[12] = \"12\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Undirected graph, \n",
    "G2 = snap.TUNGraph.New()\n",
    "\n",
    "# Directed network\n",
    "N1 = snap.TNEANet.New()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drawing Graphs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Needs graphviz to be installed. See here https://www.graphviz.org/ <BR>\n",
    "Use only for very **small** graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "snap.DrawGViz(G1, snap.gvlDot, \"G1.png\", \"G1\", NIdName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import Image\n",
    "Image(filename='G1.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Graph Traversal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Node traversal\n",
    "for NI in G1.Nodes():\n",
    "    print \"node id %d, out-degree %d, in-degree %d\" \\\n",
    "    % (NI.GetId(), NI.GetOutDeg(), NI.GetInDeg())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Edge traversal\n",
    "for EI in G1.Edges():\n",
    "    print \"(%d, %d)\" % (EI.GetSrcNId(), EI.GetDstNId())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Edge traversal by nodes\n",
    "for NI in G1.Nodes():\n",
    "    for DstNId in NI.GetOutEdges():\n",
    "        print \"(%d %d)\" % (NI.GetId(), DstNId)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Graph Saving and Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Save text\n",
    "snap.SaveEdgeList(G1, \"test.txt\", \"List of edges\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Load text\n",
    "G2 = snap.LoadEdgeList(snap.PNGraph,\"test.txt\",0,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__LoadEdgeList__(GraphType, InFNm, SrcColId, DstColId) <BR>\n",
    "__Parameters__:\n",
    "-  GraphType: graph class (input)<BR>\n",
    "   Class of output graph â€“ one of PNGraph, PNEANet, or PUNGraph.\n",
    "-  InFNm: string (input)<BR>\n",
    "   Filename with the description of the graph edges.\n",
    "-  SrcColId: int (input)<BR>\n",
    "   The column number in the file, which contains the node id representing the source vertex.\n",
    "-  DstColId: int (input)<BR>\n",
    "   The column number in the file, which contains the node id representing the destination vertex."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Save Binary\n",
    "FOut = snap.TFOut(\"test.graph\") \n",
    "G2.Save(FOut)\n",
    "FOut.Flush()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Load Binary\n",
    "FIn = snap.TFIn(\"test.graph\")\n",
    "G4 = snap.TNGraph.Load(FIn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# wiki-Vote.txt\n",
    "G5 = snap.LoadEdgeList(snap.PNGraph,\"Wiki-Vote.txt\",0,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting with Snap.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Needs gnuplot to be installed. See here http://www.gnuplot.info/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Graph of Java QA on StackOverflow:\n",
    "G = snap.LoadEdgeList(snap.PNGraph, \"qa.txt\", 1, 5)\n",
    "\n",
    "# Plot in-degree distribution \n",
    "snap.PlotInDegDistr(G, \"Stack-Java\", \"Stack-Java In Degree\")\n",
    "# Plots are generated in files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Image(filename='inDeg.Stack-Java.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "snap.PlotInDegDistr(G5, \"wiki_vote\", \"Wiki Vote In Degree\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Image(filename='inDeg.wiki_vote.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "InDegV = snap.TIntPrV()\n",
    "snap.GetNodeInDegV(G, InDegV)\n",
    "\n",
    "numItemstoList=20;i=0;\n",
    "for item in InDegV:\n",
    "    print \"node ID %d: in-degree %d\" % (item.GetVal1(), item.GetVal2())\n",
    "    i=i+1\n",
    "    if i==numItemstoList:\n",
    "        break # comment to output all nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Powerlaw fit of degree Distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Source code and Windows installers of powerlaw package are available from the Python Package Index, PyPI, at https://pypi.python.org/pypi/powerlaw. It can be readily installed with pip:\n",
    "\n",
    "`pip install powerlaw`\n",
    "\n",
    "Source code is also available on GitHub at https://github.com/jeffalstott/powerlaw and Google Code at https://code.google.com/p/powerlaw/."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import powerlaw as pl\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = np.arange(1, snap.CntNonZNodes(G) - snap.CntInDegNodes(G,0) +2)\n",
    "i=0\n",
    "for item in InDegV:\n",
    "    if item.GetVal2() > 0 :\n",
    "        i=i+1\n",
    "        a[i]=item.GetVal2()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "bars, bins=np.histogram(a,bins=np.arange(1,max(a)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt; \n",
    "plt.rcParams['figure.figsize'] = [10, 7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.loglog(bins[0:-1],bars)\n",
    "plt.ylabel('# users per degree')\n",
    "plt.xlabel('in-degree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.loglog(bins[0:-1],sum(bars)-np.cumsum(bars))\n",
    "plt.ylabel('# users with degree larger or equla than x')\n",
    "plt.xlabel('in-degree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fit=pl.Fit(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pl.plot_pdf(a, color='r')\n",
    "fig2=fit.plot_pdf(color='b',linewidth=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# power-law exponent\n",
    "fit.alpha"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# min value of x where power-law behaviour starts\n",
    "fit.xmin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# result of Kolmogorovâ€“Smirnov test\n",
    "fit.D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#comparison of data and Pl-fits of pdf (blue) and ccdf (red)\"\n",
    "figCCDF = fit.plot_pdf(color='b', linewidth=2)\n",
    "fit.power_law.plot_pdf(color='b', linestyle='--', ax=figCCDF)\n",
    "fit.plot_ccdf(color='r', linewidth=2, ax=figCCDF)\n",
    "fit.power_law.plot_ccdf(color='r', linestyle='--', ax=figCCDF)\n",
    "####\n",
    "figCCDF.set_ylabel(u\"p(X),  p(Xâ‰¥x)\")\n",
    "figCCDF.set_xlabel(r\"in-degree\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Network Analytics with SNAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Preferential Attachment\n",
    "GPA = snap.GenPrefAttach(30, 3, snap.TRnd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Get an induced subgraph on a set of nodes NIdV:\n",
    "NIdV = snap.TIntV()\n",
    "for i in range(1,9): \n",
    "    NIdV.Add(i)\n",
    "SubGPA = snap.GetSubGraph(GPA, NIdV)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Print Graph Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "snap.PrintInfo(G, \"QA Stats\", \"qa-info_basic.txt\",  True) #if set to True only basic info is shown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('qa-info_basic.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "snap.PrintInfo(G, \"QA Stats\", \"qa-info.txt\",  False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('qa-info.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "snap.PrintInfo(G5, \"Wiki Votes Stats\", \"wiki_votes-info.txt\",  False)\n",
    "f = open('wiki_votes-info.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Connected Components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get largest WCC\n",
    "MxWcc = snap.GetMxWcc(G5)\n",
    "print \"max wcc nodes %d, edges %d\" % \\\n",
    "    (MxWcc.GetNodes(), MxWcc.GetEdges())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get WCC sizes\n",
    "WccV = snap.TIntPrV()\n",
    "snap.GetWccSzCnt(G5, WccV)\n",
    "\n",
    "print \"# of connected component sizes\", WccV.Len() \n",
    "for comp in WccV:\n",
    "    print \"size %d, number of components %d\" % \\\n",
    "        (comp.GetVal1(), comp.GetVal2())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "snap.PrintInfo(MxWcc, \"Wiki Votes Stats\", \"wiki_votes-infoMxWcc.txt\",  False)\n",
    "f = open('wiki_votes-infoMxWcc.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MxScc = snap.GetMxScc(G5) #Returns a graph representing the largest strongly connected component in Graph.\n",
    "print \"max wcc nodes %d, edges %d\" % \\\n",
    "    (MxScc.GetNodes(), MxScc.GetEdges())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get SCC sizes\n",
    "SccV = snap.TIntPrV()\n",
    "snap.GetSccSzCnt(G5, WccV)\n",
    "\n",
    "print \"# of connected component sizes\", WccV.Len() \n",
    "for comp in WccV:\n",
    "    print \"size %d, number of components %d\" % \\\n",
    "        (comp.GetVal1(), comp.GetVal2())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "snap.PrintInfo(MxScc, \"Wiki Votes Stats\", \"wiki_votes-infoMxScc.txt\",  False)\n",
    "f = open('wiki_votes-infoMxScc.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyze node connectivity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get node with max degree\n",
    "NId = snap.GetMxDegNId(GPA) \n",
    "print \"max degree node\", NId\n",
    "\n",
    "# Get degree distribution\n",
    "DegToCntV = snap.TIntPrV()\n",
    "snap.GetDegCnt(GPA, DegToCntV)\n",
    "for item in DegToCntV:\n",
    "    print \"%d nodes with degree %d\" % (\n",
    "        item.GetVal2(), item.GetVal1())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Node Centrality\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate node PageRank scores\n",
    "PRankH = snap.TIntFltH()\n",
    "snap.GetPageRank(G, PRankH)\n",
    "\n",
    "# Print them out\n",
    "numItemstoList=20;\n",
    "i=0;\n",
    "for item in PRankH:\n",
    "    print item, PRankH[item]\n",
    "    i=i+1\n",
    "    if i==numItemstoList:\n",
    "        break # uncomment to output all nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# sort them\n",
    "sorted_PRankH = sorted(PRankH, key = lambda key: PRankH[key],\n",
    " reverse = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print top n nodes with highest Pagerank\n",
    "for item in sorted_PRankH[0:10]:\n",
    "    print item, PRankH[item]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Triads and Clsutering Coefficient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count triads\n",
    "Triads = snap.GetTriads(G5)\n",
    "print \"triads\", Triads\n",
    "\n",
    "# Calculate clustering coefficient\n",
    "CC = snap.GetClustCf(G5)\n",
    "print \"clustering coefficient\", CC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Distances between nodes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate diameter\n",
    "D = snap.GetBfsFullDiam(G5, 7000)\n",
    "print \"diameter\", D\n",
    "\n",
    "# Calculate effective diameter\n",
    "ED = snap.GetBfsEffDiam(G5, 7000) \n",
    "print \"effective diameter\", ED"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**GetBfsEffDiamAll**(Graph, NTestNode, IsDir)<BR>\n",
    "Returns the approximation of the effective diameter, the diameter, and the average shortest path length in a graph. Does this by performing BFS from NTestNodes random starting nodes.\n",
    "\n",
    "**Parameters:**\n",
    "- Graph: graph (input)\n",
    "        A Snap.py graph or a network.\n",
    "- NTestNodes: int (input)\n",
    "        The number of random start nodes to use in the BFS used to calculate the graph diameter and effective diameter.\n",
    "\n",
    "- IsDir: bool (input)\n",
    "        Indicates whether the edges should be considered directed or undirected.\n",
    "\n",
    "**Return value:**\n",
    "    list: [ float, float, int, float ]<BR>\n",
    "    The list contains four elements: \n",
    "    1. the first and the second element are the effective diameter of the graph, \n",
    "    3. the third element is the diameter\n",
    "    4. the fourth element is the average shortest path length."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Difference between directed and undirected\n",
    "result = snap.GetBfsEffDiamAll(G5, 1000, False) \n",
    "print result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = snap.GetBfsEffDiamAll(G5, 1000, True)\n",
    "print result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate avverage distance\n",
    "NIdToDistH = snap.TIntH()\n",
    "# Node traversal\n",
    "distL=[]\n",
    "i=0\n",
    "MxSccG5 = snap.GetMxScc(G5)\n",
    "numNodes=MxSccG5.GetNodes()\n",
    "dmN=np.zeros(numNodes)\n",
    "IsDir = True\n",
    "\n",
    "for NI in MxSccG5.Nodes():\n",
    "    i=i+1;\n",
    "    if (i% 100) ==0:\n",
    "        print \"node %d, of %d\" \\\n",
    "        % (i, numNodes)\n",
    "    shortestPath = snap.GetShortPath(MxSccG5, NI.GetId(), NIdToDistH, IsDir)\n",
    "    temp=[]\n",
    "    for item in NIdToDistH:\n",
    "        if NIdToDistH[item] > 0:\n",
    "            distL.append(NIdToDistH[item])\n",
    "            temp.append(NIdToDistH[item])\n",
    "    dmN[i-1]=np.mean(temp)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate diameter\n",
    "D = snap.GetBfsFullDiam(MxSccG5, 1300, IsDir)\n",
    "print \"diameter\", D\n",
    "\n",
    "# Calculate effective diameter\n",
    "ED = snap.GetBfsEffDiam(MxSccG5, 1300, IsDir) \n",
    "print \"effective diameter\", ED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "distV=np.asarray(distL)\n",
    "np.mean(distV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "numNodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(dmN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.percentile(distV,90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.percentile(dmN,90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "IsDir = True\n",
    "snap.GetBfsEffDiam(MxSccG5, 7000, IsDir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = snap.GetBfsEffDiamAll(MxSccG5, 1000, True)\n",
    "print result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## K-cores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Core3 = snap.GetKCore(G5, 3)  # Calculate 3-core\n",
    "# Returns the subgraph  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "K=0\n",
    "while True:\n",
    "    K=K+1\n",
    "    KCore = snap.GetKCore(G5, K)\n",
    "    if KCore.Empty():\n",
    "        print 'No Core exists for K=%d' % K\n",
    "        break\n",
    "    else:\n",
    "        print 'Core exists for K=%d' % K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calcualte the number of nodes in every core\n",
    "CoreIDSzV = snap.TIntPrV()\n",
    "kValue = snap.GetKCoreNodes(G5, CoreIDSzV)\n",
    "for item in CoreIDSzV:\n",
    "    print \"k-core: %d nodes: %d\" % (item.GetVal1(), item.GetVal2())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Transform directed Graph into undirected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "G5Un = snap.ConvertGraph(snap.PUNGraph, G5)\n",
    "snap.PrintInfo(G5Un, \"Wiki Votes UN Stats\", \"wiki_votesUN-info.txt\",  False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('wiki_votesUN-info.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate Artificial Graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "AverageDegree=G5Un.GetEdges()/G5Un.GetNodes() #truncated average degree\n",
    "AverageDegreeF=G5Un.GetEdges()/float(G5Un.GetNodes())\n",
    "print AverageDegree\n",
    "print AverageDegreeF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Preferential Attachment\n",
    "Rnd = snap.TRnd()\n",
    "G5PRefAttach = snap.GenPrefAttach(G5Un.GetNodes(), AverageDegree, Rnd)\n",
    "snap.PrintInfo(G5PRefAttach, \"Wiki Votes PA Stats\", \"wiki_votesPA-info.txt\",  False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('wiki_votesPA-info.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Configuration Model\n",
    "G5UnDegSeqV = snap.TIntV()\n",
    "snap.GetDegSeqV(G5Un, G5UnDegSeqV)\n",
    "\n",
    "Rnd = snap.TRnd()\n",
    "G5ConfModel = snap.GenConfModel(G5UnDegSeqV, Rnd)\n",
    "snap.PrintInfo(G5ConfModel, \"Wiki Votes ConfModel Stats\", \"wiki_votesConfModel-info.txt\",  False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('wiki_votesConfModel-info.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Node Rewiring\n",
    "Rnd = snap.TRnd()\n",
    "G5RW = snap.GenRewire(G5Un, 1000, Rnd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "snap.PrintInfo(G5RW, \"Wiki Votes Rewire Stats\", \"wiki_votesRewire-info.txt\",  False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('wiki_votesRewire-info.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Erdos-Renyi random graph\n",
    "G5ER = snap.GenRndGnm(snap.PNGraph, G5.GetNodes(),G5.GetEdges())\n",
    "snap.PrintInfo(G5ER, \"Wiki Votes Random Stats\", \"wiki_votesRandom-info.txt\",  False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G5Un.GetEdges()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('wiki_votesRandom-info.txt', 'r')\n",
    "file_contents = f.read()\n",
    "print (file_contents)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Task__: Calculate k-cores and plot degree disitributions for G5ER and G5PRefAttach. Compare with original data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
